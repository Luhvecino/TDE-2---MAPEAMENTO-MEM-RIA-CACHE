entrada = input("Digite a sequ√™ncia de p√°ginas separadas por v√≠rgula: ")
paginas = [int(x.strip()) for x in entrada.split(",")]

num_quadros = int(input("Digite o n√∫mero de quadros de mem√≥ria: "))

memoria = [None] * num_quadros
uso_recente = []  # Guarda √≠ndices de uso
page_faults = 0

print("\n--- Simula√ß√£o MRU ---")

for pagina in paginas:
    print(f"\nüîπ Inserindo p√°gina: {pagina}")
    if pagina not in memoria:
        page_faults += 1
        if None in memoria:
            idx = memoria.index(None)
        else:
            # O mais recentemente usado √© o √∫ltimo da lista
            idx = uso_recente.pop()

        removida = memoria[idx]
        memoria[idx] = pagina
        print(f"üì¶ Page Fault! Substituiu {removida} no quadro {idx}.")
    else:
        idx = memoria.index(pagina)
        print(f"‚úÖ P√°gina {pagina} acessada (quadro {idx}).")
        if idx in uso_recente:
            uso_recente.remove(idx)

    uso_recente.append(idx)

    # Mostrar estado atual
    for i, p in enumerate(memoria):
        print(f" q{i}: {p if p is not None else '-'}")

print(f"\nTotal de Page Faults (MRU): {page_faults}")

# Mais Recentemente Usado

# 1 - Teste com a sequencia de paginas para 8 quadros.:
# a ) 4,3,25,8,19,6,25,8,16,35,45,22,8,3,16,25,7
# qual quadro na mem√≥ria possuir√° a p√°gina 7 ?
# q2
# Total de Page Faults (MRU): 11


# b)  4,5,7,9,46,45,14,4,64,7,65,2,1,6,8,45,14,11
# qual quadro na mem√≥ria possuir√° a p√°gina 11?
# q6
# Total de Page Faults (MRU): 14

# c) 4,6,7,8,1,6,10,15,16,4,2,1,4,6,12,15,16,11 
# qual quadro na mem√≥ria possuir√° a p√°gina 11?
# q7
# Total de Page Faults (MRU): 12

# 2 - Qual a melhor politica de substitui√ß√£o?

# R: Depende do padr√£o de acesso √†s p√°ginas. 
# Em geral, LRU tende a ser mais eficiente para padr√µes de acesso locais, enquanto FIFO pode ser mais simples de implementar. 
# MRU pode ser √∫til em casos espec√≠ficos onde as p√°ginas mais recentemente usadas s√£o menos propensas a serem reutilizadas em breve.
# 
